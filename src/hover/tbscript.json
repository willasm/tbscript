{
    "keyword": {
        "prefix":"",
        "usage":"",
        "description":"''",
        "example":""
    },
    "sleep": {
        "prefix":"sleep",
        "usage":"SLEEP(seconds | -milliseconds)\n\n",
        "description":"'Use the SLEEP subroutine to pause for the specified number of seconds. SLEEP returns\nafter the specified number of seconds has passed. Starting in version 15 you can use a\nnegative value to delay in milliseconds.'",
        "example":""
    },
    "setuefivar": {
        "prefix":"setuefivar",
        "usage":"r =UEFISETVAR(varname, namespaceguid[, bindata, attributes])\n\n",
        "description":"'Set a UEFI firmware variable (variable names are case sensitive). This subroutine is\nonly available when the system booted using UEFI. In linux, the efivarfs must be mounted\nat /sys/firmware/efi/efivars. The linux command to mount is:\n\tmount -t efivarfs none /sys/firmware/efi/efivars.\nWhen bindata is not provided the variable is deleted. The return value is zero on success\notherwise an error code is returned.\n\nWARNING: This function does not prevent you from deleting variables or setting invalid\ndata. Using invalid data or deleing the wrong variables can prevent your system from\nbooting until the firmware is reset to factory defaults. Contact the system manufacturer\nfor instructions on resetting factory defaults.'",
        "example":"const UEFI_VAR_NV = 1\nconst UEFI_VAR_BS = 2\nconst UEFI_VAR_RT = 4\n\nsub main()\n\ta = UEFI_VAR_NV+UEFI_VAR_BS+UEFI_VAR_RT // attributes\n\tt = binary(2, 3, 0, 2)                  // 16-bit value for number 2\n\te = setuefivar(\"Timeout\",\"{8BE4DF61-93CA-11D2-AA0D-00E098032B8C}\", t, a)\n\tif (e = 0) then\n\t\tprintl(\"Boot Timeout Set to\", binary(t, 3))\n\telse\n\t\tprintl(\"Unable to set Boot Timeout.  Error:\", e)\n\tend if\nend sub"
    },
    "setlocale": {
        "prefix":"setlocale",
        "usage":"SETLOCALE(locale)\n\n",
        "description":"'Use this subroutine to set the current locale. This setting affects the format of date\nand time strings created by other subroutines. Note that even with locale set, decimal\nnumbers will continue to accept use of ‘.’.\n\nThe locale argument may be any of the following values:\n\n\t0  Date and time strings will be created using the default format.\n\t   Locale set to default (Ver 10+).\n\t1  Default date and time strings will be created using the ISO 8601 format.\n\t2  Default date and time without zero prefix (Ver 10+).\n\t3  Default time removing space between time and AM/PM  (Ver 10+).\n\t4  Default time to use lower case AM/PM (Ver 10+).\n\t5  Locale pulled in from environment (not related to date/time strings) (Ver 10+).\n\t6  Use OS locale for Date/Time (Ver 10+).'",
        "example":""
    },
    "setenv": {
        "prefix":"setenv",
        "usage":"SETENV(env, val)\n\n",
        "description":"'Use SETENV to set an environment variable. If the environment variable already exists,\nthe existing variable is modified. Otherwise, it is created.'",
        "example":"sub main()\n\tsetenv(\"path\", \"C:\\\")\n\tprintl(getenv(\"path\"))\nend sub"
    },
    "getuefivar": {
        "prefix":"getuefivar",
        "usage":"binvar=UEFIGETVAR(varname, namespaceguid)\n\n",
        "description":"'Retrieve a UEFI firmware variable (variables are case sensitive) and its attributes in\nbinvar.attributes. This subroutine is only available when the system booted using UEFI.\nIn linux, the efivarfs must be mounted at /sys/firmware/efi/efivars. The linux command to\nmount is: mount -t efivarfs none /sys/firmware/efi/efivars. On failure the returned\nbinvar is zero bytes in length and contains a member binvar.errno to indicate the error\ncode.'",
        "example":"sub main()\n\tt = getuefivar(\"Timeout\", \"{8BE4DF61-93CA-11D2-AA0D-00E098032B8C}\")\n\tif (len(t) > 0) then\n\t\tprintl(\"Boot Timeout = \", t)\n\telse\n\t\tprintl(\"Unable to retrieve Boot Timeout. Error:\", t.errno)\n\t\tt = \"\"   // remove variable\n\tend if\nend sub"
    },
    "getsysino": {
        "prefix":"getsysino",
        "usage":"si = GETSYSINFO()\n\n",
        "description":"'Returns information about the current system. The variable contains the following\nmembers: BIOSDate, BIOSVendor, BIOSVersion, SysFamily, SysManufacturer, SysProductName,\nSysSKU, SysVersion, SysUUID. TBSVER 6 adds two additional members: BIOSFeatures1,\nBIOSFeatures2.  TBSVER 7 adds CPUCount. For each CPUCount an array (1 based) is provided\nas CPU[n] with the following members: ID, Cores, CoresEnabled, Threads, and Features.\nNote that the Core and Feature information may not be reported by the system; however the\nThreads member is valid if Cores is non-zero.  The ID contains the contents of\ncpuid leaf 1 EAX (low) and EDX (high) values.'",
        "example":"sub main()\n\tsi=getsysinfo()\n\tif (si) then\n\t\tprintl(\"BIOS Date: \", si.biosdate)\n\t\tprintl(\"BIOS Vendor: \", si.biosvendor)\n\t\tprintl(\"BIOS Version: \", si.biosversion)\n\t\tprintl(\"System Family: \", si.sysfamily)\n\t\tprintl(\"System Manufacturer: \", si.sysmanufacturer)\n\t\tprintl(\"System Product Name: \", si.sysproductname)\n\t\tprintl(\"System SKU: \", si.syssku)\n\t\tprintl(\"System Version: \", si.sysversion)\n\t\tprintl(\"System UUID: \", si.sysuuid)\n\telse\n\t\tprintl(\"Unable to obtain the system information\")\n\tend if\nend sub"
    },
    "gettime": {
        "prefix":"gettime",
        "usage":"s = GETTIME()\n\n",
        "description":"'The GETTIME subroutine returns the current time as a string.'",
        "example":"sub main()\n\t// Extract components of current time\n\ttime = gettime()\n\thour = mid(time, 1, 2)\n\tmin = mid(time, 4, 2)\n\tsec = mid(time, 7, 2)\nend sub"
    },
    "getstr": {
        "prefix":"getstr",
        "usage":"s = GETSTR([prompt [, maxchars]])\n\n",
        "description":"'Returns a string entered by the user. prompt is an optional prompt that is displayed\nbefore waiting for the user to enter a string. In addition, maxchars is an optional\nnumber that specifies the maximum length of the string that the user can enter.\n\nNOTE: If maxchars is specified, the prompt argument must be included. If TXINIT is active\nthen a newline is not automatically output after pressing enter (except under Windows\nwhich always outputs a newline).'",
        "example":""
    },
    "getkey": {
        "prefix":"getkey",
        "usage":"n = GETKEY([prompt [, timeout]])\n\n",
        "description":"'The GETKEY subroutine returns the value of the next key pressed by the user. Prompt is\nan optional prompt string that is displayed before waiting for the key press.\n\nTimeout is an optional argument that specifies a timeout period, in seconds. If the user\ndoes not press any key within the specified number of seconds, the GETKEY subroutine\nreturns a value of 0 without waiting for a keystroke. If the timeout argument is omitted\nor is 0, the GETKEY subroutine waits for the next keystroke regardless of how long it\ntakes. Note that the timeout argument can be specified only if the prompt argument is\nspecified; however, prompt may be an empty string (“”).'",
        "example":""
    },
    "getenv": {
        "prefix":"getenv",
        "usage":"s = GETENV(s)\n\n",
        "description":"'Returns the value of the specified environment variable.'",
        "example":""
    },
    "getdatetime": {
        "prefix":"getdatetime",
        "usage":"s = GETDATETIME([datetimevalue])\n\n",
        "description":"'The GETDATETIME subroutine returns a date and time string value based on the current\nlocale setting. If datetimevalue is not provided then the current date and time are used.\nThe datetimevalue parameter is a numeric value based on either Unix time or Windows file\ntime. Large values are assumed to be Windows file time, smaller values Unix time.\nNOTE: The Right(TBSVER,3)=”x16” version of TBScript does not support the datetimevalue\nparameter and will return an empty string.'",
        "example":"sub main()\n\t// Extract components of current date/time\n\tdatetime = getdatetime()\n\tmonth = mid(datetime, 1, 2)\n\tday = mid(datetime, 4,2)\n\tyear = mid(datetime, 7, 4)\n\thour = mid(datetime, 12, 2)\n\tmin = mid(datetime, 15, 2)\n\tsec = mid(datetime, 18, 2)\nend sub"
    },
    "getdate": {
        "prefix":"getdate",
        "usage":"s = GETDATE()\n\n",
        "description":"'The GETDATE subroutine returns the current date as a string.'",
        "example":"sub main()\n\t// Extract components of current date\n\tdate = getdate()\n\tmonth = mid(date, 1, 2)\n\tday = mid(date, 4, 2)\n\tyear = mid(date, 7, 4)\nend sub"
    },
    "ext": {
        "prefix":"ext",
        "usage":"r = EXT(s [, capture])\n\n",
        "description":"'Executes script extensions that may exist in a product. An error code is returned if\nthere is one. The optional capture parameter (true or false) can be used to have the\nfunction return the output from the command. The return variable has the captured output\nin the .extcap member (there is a 64K character limit). If a “pause” option is used the\noutput won’t be captured because the command will be interactive\n(e.g. “dir /p”, “type filename /p”, etc.).'",
        "example":"sub main()\n\text(\"extcmd param1 param2\")\n\n\t// read value from INI file\n\tr = ext(\"list ini settings.ini options username\", 1)\n\tp = instr(r.extcap, \"^n\")\n\tif (p>1) then\n\t\tval = left(r.extcap, p-1)\n\telse\n\t\tval = r.extcap\n\tend if\nend sub"
    },
    "exec": {
        "prefix":"exec",
        "usage":"EXEC(s[,f])\n\n",
        "description":"'Executes a shell command. The string s can be any valid shell command. Returns the\nreturn code (errorlevel) of the command.  The optional f parameter determines the format\nused to pass the parameters to external programs. It was added to maintain backwards\ncompatibility.  By default (or zero) the parameters are parsed by exec and then passed to\nthe program, otherwise if set to one (1) the raw non-parsed parameters are passed.'",
        "example":"sub main()\n\texec(\"program ^\"^\"param one^\"^\"\" ---param2) // old format\n\texec(\"program ^\"param one^\" --param2\", 1)   // new format is easier\n\texec(\"script.tbs\")\n\texec(\"shellcommand\")\nend sub"
    },
    "directvideo": {
        "prefix":"directvideo",
        "usage":"DIRECTVIDEO([n])\n\n",
        "description":"'This subroutine is used to set the DOS environment to either write directly to video\nmemory or to use the BIOS. By default direct video mode is enabled as it’s much faster.\nIf you have a need to use BIOS video then use this subroutine to turn off direct video\nmode.  This subroutine was added in TBSVER 4.'",
        "example":"sub main()\n\tdirectvideo(0) // turn off\n\tdirectvideo()  // turn on\n\tdirectvideo(1) // turn on\nend sub"
    },
    "argc": {
        "prefix":"argc",
        "usage":"(ARG, ARGC) Subroutines\n\na = ARG(n)\nn = ARGC()\n\n",
        "description":"'The ARG and ARGC subroutine are used to access any arguments that were passed on the\ncommand line (when the script was started). ARGC returns the number of arguments. ARG()\nreturns the argument indicated by n, which can be in the range 1 through the value\nreturned by ARGC.\n\nIn addition to the arguments described above, the ARG subroutine returns the fully\nqualified path of the script file when n = 0.'",
        "example":"sub main()\n\tprintl(\"Script name = \", arg(0))\n\tfor i = 1 to argc()\n\t\tprintl(\"Arg \", i, \" = \", arg(i))\n\tnext\nend sub"
    },
    "arg": {
        "prefix":"arg",
        "usage":"(ARG, ARGC) Subroutines\n\na = ARG(n)\nn = ARGC()\n\n",
        "description":"'The ARG and ARGC subroutine are used to access any arguments that were passed on the\ncommand line (when the script was started). ARGC returns the number of arguments. ARG()\nreturns the argument indicated by n, which can be in the range 1 through the value\nreturned by ARGC.\n\nIn addition to the arguments described above, the ARG subroutine returns the fully\nqualified path of the script file when n = 0.'",
        "example":"sub main()\n\tprintl(\"Script name = \", arg(0))\n\tfor i = 1 to argc()\n\t\tprintl(\"Arg \", i, \" = \", arg(i))\n\tnext\nend sub"
    },
    "exitloop": {
        "prefix":"exitloop",
        "usage":"ExitLoop",
        "description":"'Exits out of a While/Wend or For/Next loop.'",
        "example":"sub main()\n\t// similar to a repeat/until loop\n\twhile 1\n\t\tkeyval=GetKey()\n\t\tprintl(\"You entered key code \", keyval)\n\t\tif keyval=asc(\"q\") then\n\t\t\texitloop\n\t\tend if\n\twend\nend sub"
    },
    "break": {
        "prefix":"break",
        "usage":"n = BREAK(n)\n\n",
        "description":"'Enable (n=1) or disable (n=0) the ability to break out of the running of the script by\nuse of the CTRL-C or CTRL-BREAK key on the keyboard. The return value is the break value\nprior to setting the new value.'",
        "example":"sub main()\n\t// Disable CTRL-C and CTRL-Break\n\tBREAK(0)\nend sub"
    },
    "goto": {
        "prefix":"goto",
        "usage":"GOTO label\n\n",
        "description":"'Use the GOTO keyword to jump to another line in the current script. A GOTO line is\nidentified by a symbol followed by a colon (:). The GOTO statement and the label being\njumped to must be within the same subroutine.\n\nNOTE: Caution must be taken when jumping into or out of a loop such as a FOR..NEXT\nor WHILE..WEND loop. For example, if you jumped into a FOR..NEXT loop, execution would\ncontinue until the NEXT is encountered, which would produce a “NEXT without FOR” error\nbecause the FOR keyword was skipped.'",
        "example":"sub main()\n\tprintl(\"This line gets executed\")\n\tgoto jump\n\tprintl(\"This line does not get executed\")\njump:\n\tprintl(\"This line also gets executed\")\nend sub"
    },
    "return": {
        "prefix":"return",
        "usage":"RETURN [v]\n\n",
        "description":"'Use the RETURN keyword to exit the current subroutine and return to the subroutine\nthat called it. A RETURN statement has the same effect as encountering an END SUB.\n\nIf an expression is included after the RETURN keyword, the value of that expression is\nreturned to the calling subroutine. If a value is returned from the MAIN subroutine,\nthat value sets the script return code (errorlevel).'",
        "example":""
    },
    "for": {
        "prefix":"for",
        "usage":"(FOR..TO..NEXT) Keywords\n\nFOR var = start TO end\n\nNEXT\n\n",
        "description":"'Use a FOR loop to execute a block of statements a specified number of times.\n\nInitially, var is set to the value specified by start. Then, each time the block of statements are executed, var is incremented. When var is greater than end, execution\ncontinues on the next statement after the NEXT keyword. If end is less than start,\nthe block of statements is never executed.\n\nNOTE: The start and end values are evaluated only once and the resulting values are\ncached. So, for example, if the loop modifies values used in the end expression, this\nwill not alter the number of times the block of statements is executed.\n\nNOTE 2: Unlike the BASIC language, the name of the variable is not required nor allowed\nafter the NEXT statement.'",
        "example":"sub main()\n\tfor i = 1 to 10\n\t\tprintl(\"This is line \", i)\n\tnext\nend sub"
    },
    "next": {
        "prefix":"next",
        "usage":"(FOR..TO..NEXT) Keywords\n\nFOR var = start TO end\n\nNEXT\n\n",
        "description":"'Use a FOR loop to execute a block of statements a specified number of times.\n\nInitially, var is set to the value specified by start. Then, each time the block of statements are executed, var is incremented. When var is greater than end, execution\ncontinues on the next statement after the NEXT keyword. If end is less than start,\nthe block of statements is never executed.\n\nNOTE: The start and end values are evaluated only once and the resulting values are\ncached. So, for example, if the loop modifies values used in the end expression, this\nwill not alter the number of times the block of statements is executed.\n\nNOTE 2: Unlike the BASIC language, the name of the variable is not required nor allowed\nafter the NEXT statement.'",
        "example":"sub main()\n\tfor i = 1 to 10\n\t\tprintl(\"This is line \", i)\n\tnext\nend sub"
    },
    "to": {
        "prefix":"to",
        "usage":"(FOR..TO..NEXT) Keywords\n\nFOR var = start TO end\n\nNEXT\n\n",
        "description":"'Use a FOR loop to execute a block of statements a specified number of times.\n\nInitially, var is set to the value specified by start. Then, each time the block of statements are executed, var is incremented. When var is greater than end, execution\ncontinues on the next statement after the NEXT keyword. If end is less than start,\nthe block of statements is never executed.\n\nNOTE: The start and end values are evaluated only once and the resulting values are\ncached. So, for example, if the loop modifies values used in the end expression, this\nwill not alter the number of times the block of statements is executed.\n\nNOTE 2: Unlike the BASIC language, the name of the variable is not required nor allowed\nafter the NEXT statement.'",
        "example":"sub main()\n\tfor i = 1 to 10\n\t\tprintl(\"This is line \", i)\n\tnext\nend sub"
    },
    "while": {
        "prefix":"while",
        "usage":"(WHILE..WEND) Keywords\n\nWHILE expression\n\tstatements\nWEND\n\n",
        "description":"'Use a WHILE loop to execute a block of statements as long as an expression is true.'",
        "example":"sub main()\n\ta = 1\n\twhile a <= 25\n\t\tprintl(\"This is test line \", a)\n\t\ta = a + 1\n\twend\nend sub"
    },
    "wend": {
        "prefix":"wend",
        "usage":"(WHILE..WEND) Keywords\n\nWHILE expression\n\tstatements\nWEND\n\n",
        "description":"'Use a WHILE loop to execute a block of statements as long as an expression is true.'",
        "example":"sub main()\n\ta = 1\n\twhile a <= 25\n\t\tprintl(\"This is test line \", a)\n\t\ta = a + 1\n\twend\nend sub"
    },
    "then": {
        "prefix":"then",
        "usage":"(IF..THEN..ELSEIF..ELSE..END IF) Keywords\n\nIF expression THEN\n\tstatements\n[ELSEIF expression2 THEN]\n\tstatements\n[ELSE]\n\tstatements\n[END IF]\n\n",
        "description":"'Use the IF keyword to execute a block of statements only if a condition is true.\n\nOptionally, you can also specify additional blocks that are executed only\nif the previous conditions are false and a new condition is true (ELSEIF),\nor that are executed only if all other blocks are false (ELSE).'",
        "example":"sub main()\n\ta = 10\n\tb = 0\n\tc = 0\n\n\tif a > 5 then\n\t\t printl(\"a > 5\")\n\telseif b > 5 then\n\t\tprintl(\"b > 5\")\n\telseif c > 5 then\n\t\tprintl(\"c > 5\")\n\telse\n\t\tprintl(\"a, b, and c < 5\")\n\tend if\n\t// Note the following difference due to b being numeric variable\n\tif b=\"X\" then\n\t\tprint(\"b = 0\")\n\tend if\n\n\tif \"X\"=b then\n\t\tprint(\"X = b\")\n\tend if\nend sub"
    },
    "elseif": {
        "prefix":"elseif",
        "usage":"(IF..THEN..ELSEIF..ELSE..END IF) Keywords\n\nIF expression THEN\n\tstatements\n[ELSEIF expression2 THEN]\n\tstatements\n[ELSE]\n\tstatements\n[END IF]\n\n",
        "description":"'Use the IF keyword to execute a block of statements only if a condition is true.\n\nOptionally, you can also specify additional blocks that are executed only\nif the previous conditions are false and a new condition is true (ELSEIF),\nor that are executed only if all other blocks are false (ELSE).'",
        "example":"sub main()\n\ta = 10\n\tb = 0\n\tc = 0\n\n\tif a > 5 then\n\t\t printl(\"a > 5\")\n\telseif b > 5 then\n\t\tprintl(\"b > 5\")\n\telseif c > 5 then\n\t\tprintl(\"c > 5\")\n\telse\n\t\tprintl(\"a, b, and c < 5\")\n\tend if\n\t// Note the following difference due to b being numeric variable\n\tif b=\"X\" then\n\t\tprint(\"b = 0\")\n\tend if\n\n\tif \"X\"=b then\n\t\tprint(\"X = b\")\n\tend if\nend sub"
    },
    "else": {
        "prefix":"else",
        "usage":"(IF..THEN..ELSEIF..ELSE..END IF) Keywords\n\nIF expression THEN\n\tstatements\n[ELSEIF expression2 THEN]\n\tstatements\n[ELSE]\n\tstatements\n[END IF]\n\n",
        "description":"'Use the IF keyword to execute a block of statements only if a condition is true.\n\nOptionally, you can also specify additional blocks that are executed only\nif the previous conditions are false and a new condition is true (ELSEIF),\nor that are executed only if all other blocks are false (ELSE).'",
        "example":"sub main()\n\ta = 10\n\tb = 0\n\tc = 0\n\n\tif a > 5 then\n\t\t printl(\"a > 5\")\n\telseif b > 5 then\n\t\tprintl(\"b > 5\")\n\telseif c > 5 then\n\t\tprintl(\"c > 5\")\n\telse\n\t\tprintl(\"a, b, and c < 5\")\n\tend if\n\t// Note the following difference due to b being numeric variable\n\tif b=\"X\" then\n\t\tprint(\"b = 0\")\n\tend if\n\n\tif \"X\"=b then\n\t\tprint(\"X = b\")\n\tend if\nend sub"
    },
    "if": {
        "prefix":"if",
        "usage":"(IF..THEN..ELSEIF..ELSE..END IF) Keywords\n\nIF expression THEN\n\tstatements\n[ELSEIF expression2 THEN]\n\tstatements\n[ELSE]\n\tstatements\n[END IF]\n\n",
        "description":"'Use the IF keyword to execute a block of statements only if a condition is true.\n\nOptionally, you can also specify additional blocks that are executed only\nif the previous conditions are false and a new condition is true (ELSEIF),\nor that are executed only if all other blocks are false (ELSE).'",
        "example":"sub main()\n\ta = 10\n\tb = 0\n\tc = 0\n\n\tif a > 5 then\n\t\t printl(\"a > 5\")\n\telseif b > 5 then\n\t\tprintl(\"b > 5\")\n\telseif c > 5 then\n\t\tprintl(\"c > 5\")\n\telse\n\t\tprintl(\"a, b, and c < 5\")\n\tend if\n\t// Note the following difference due to b being numeric variable\n\tif b=\"X\" then\n\t\tprint(\"b = 0\")\n\tend if\n\n\tif \"X\"=b then\n\t\tprint(\"X = b\")\n\tend if\nend sub"
    },
    "tbosdt_key": {
        "prefix":"tbosdt_key",
        "usage":"(Global Variable)\n\n",
        "description":"'This global variable indicates the license key running TBOSDT.'",
        "example":"sub main()\n\tprintl(\"Key: \", tbosdt_key)\nend sub"
    },
    "tbosdt_user": {
        "prefix":"tbosdt_user",
        "usage":"(Global Variable)\n\n",
        "description":"'This global variable indicates the licensed user running TBOSDT.'",
        "example":"sub main()\n\tprintl(\"User: \", tbosdt_user)\nend sub"
    },
    "tbosdt": {
        "prefix":"tbosdt",
        "usage":"(Global Variable)\n\n",
        "description":"'This global variable indicates the version of TBOSDT being used.\nThe format of this string variable is:\n\nV.vv – L\n\nWhere V.vv is the version number and L is the level.\nLevel A indicates TBOSDT Professional,\nLevel B indicates TBOSDT Professional for BootIt.'",
        "example":"sub main()\n\tprintl(\"Version: \", tbosdt) // outputs Version: 1.29 - A\nend sub"
    },
    "unset": {
        "prefix":"unset",
        "usage":"UNSET v\n\n",
        "description":"'Use to clear a variable.\nUsage is recommended to clear GUI dialog and control variables when no longer needed.'",
        "example":""
    },
    "rand": {
        "prefix":"rand",
        "usage":"r = RAND([seed])\n\n",
        "description":"'Returns a pseudo-random number from 0 to 32767.\nYou can optionally provide a seed to generate a new sequence.\nThe pseudo-random numbers generated are NOT cryptographically strong.'",
        "example":""
    },
    "include": {
        "prefix":"include",
        "usage":"INCLUDE \"filename\"\n\n",
        "description":"'Use this keyword to reference another file in your script.\nThe include keyword was added in TBSVER 7 and must be used outside of any subroutines.'",
        "example":"include \"my_common_subroutines.inc\" // includes my_sqrt subroutine\n\nsub main()\n\tprintl(\"The square root of 81 is \", my_sqrt(81))\nend sub"
    },
    "global": {
        "prefix":"global",
        "usage":"GLOBAL name = value\n\n",
        "description":"'Defines a global variable.\n\nGlobal variables are similar to regular variables\nexcept they are defined in your script outside of any subroutines.'",
        "example":"global A = 100\n\nsub main()\n\tprintl(\"The value of A is \", A)\n\tChangeA()\n\tprintl(\"The value of A is \", A)\nend sub\n\nsub ChangeA()\n\tA=200\nEnd sub"
    },
    "const": {
        "prefix":"const",
        "usage":"CONST name = value\n\n",
        "description":"'Defines a constant symbol.\n\nConstants are similar to variables except\na) They are defined in your script outside of any subroutines, and\nb) Their value cannot be changed. Constants are useful, for example,\nwhen you write a script that uses a value in several places,\n but you want to be able to easily change that value at one location.\n\nThere are also default constants: TBSVER contains the version string\nof the script engine TBSENV contains \"DOS\", \"LINUX\", \"WINDOWS\",\nor \"UEFI\" depending on which type of environment the script is running on;\nTBSENVCH contains \"UNICODE\" if Windows Unicode version; TBSAPPPATH contains\nthe path name to the folder containing the main application.'",
        "example":"const A = 100\n\nsub main()\n\tprintl(\"The value of A is \", A)\nend sub"
    },
    "sub": {
        "prefix":"sub",
        "usage":"",
        "description":"'A TBScript file consists of one or more subroutines.\nAll scripts must define one subroutine called MAIN.\nExecution starts at this subroutine.\nAny subroutine can return a value using the RETURN keyword.'",
        "example": "\/\/ Here is a sample script.\n\/\/ Text that follows \/\/ or ; are comments and\n\/\/ are ignored by the interpreter.\n\/\/ Execution begins at the following subroutine\nsub main()\n\tprintl(double(5))\nend sub\n\n\/\/ Here's another subroutine. It returns the\n\/\/ argument value times two\nsub double(val)\n\treturn val * 2;\nend sub"
    },
    "main": {
        "prefix":"main",
        "usage":"",
        "description":"'A TBScript file consists of one or more subroutines.\nAll scripts must define one subroutine called MAIN.\nExecution starts at this subroutine.\nAny subroutine can return a value using the RETURN keyword.'",
        "example":"\/\/ Here is a sample script.\n\/\/ Text that follows \/\/ or ; are comments and\n\/\/ are ignored by the interpreter.\n\/\/ Execution begins at the following subroutine\nsub main()\n\tprintl(double(5))\nend sub\n\n\/\/ Here's another subroutine. It returns the\n\/\/ argument value times two\nsub double(val)\n\treturn val * 2;\nend sub"
    }
}